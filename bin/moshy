#!/usr/bin/env ruby

require 'optparse'
require 'slop'
require 'moshy'

module Moshy
  def self.top_level_help
    $options = {

    }
    opts = OptionParser.new do |opts|
      opts.banner = "
moshy, a Ruby utility for making it easier to datamosh AVI files. It has
multiple modes that can be run with the -m or --mode option.

  MODES DETAILS
  -------------

  \"prep\"
  ------
  Preps a video file for datamoshing with moshy by converting it
  into an AVI with no B-Frames (they're not good for moshing), and placing as
  few I-Frames as possible. Requires ffmpeg be installed locally.

  \"isplit\"
  --------
  Extracts individual clips from an AVI where each clip is
  separated by I-frames in the original AVI. Great for getting specific
  clips out of a larger video and later doing I-frame moshing.

  \"pdupe\"
  -------
  Duplicates a P-frame at a given frame a certain amount. To find
  out which frames are P-frames, use software like avidemux to look at the
  frame type. WARNING: This mode is a little glitchy. You may need to set
  the interval 1 or 2 above or below the frame number you actually want to
  duplicate. I'm not sure why this happens, but try it with a small
  duplication amount first. NOTE: This can mode take a while to process
  over 60-90 frame dupes.

  \"ppulse\"
  --------
  Takes c number of frames and every n frames and duplicates them a
  given amount, resulting in a consistent P-duplication datamosh that's
  good for creating rhythmic effects. This was originally created to
  create mosh effects in sync with a beat for a music video.

  \"bake\"
  ------
  \"Bakes\" your datamosh by creating a new video file from your
  datamoshed .avi, causing the datamosh effects to be treated as the actual
  content of the new video instead of an error. Requires ffmpeg to be
  installed locally.

  \"inspect\"
  ---------
  Reads an .avi file and prints which video frames are keyframes
  (I-Frames) and which frames are delta frames (P-frames or B-frames). moshy
  cannot tell the difference between a P-frame or a B-frame, so you will want
  to use avidemux or another program if you need to know.

Run moshy with mode -m <mode> --help to see options for individual modes.
  "
    end

    begin
      opts.parse
    rescue OptionParser::InvalidOption, OptionParser::InvalidArgument
    end

    puts opts
  end
end

# Because we have multiple modes, we do some initial basic arg checking
# to see if they specified a mode. If not, we show the top-level help menu.
result = Slop.parse suppress_errors: true do |o|
  o.string '-m', '--mode'
end

puts result

mode_classes = {
  "inspect" => Moshy::Inspect,
  "isplit" => Moshy::ISplit,
  "pdupe" => Moshy::PDupe,
  "ppulse" => Moshy::PPulse,
  "prep" => Moshy::Prep,
  "bake" => Moshy::Bake
}

if mode_classes.has_key? result[:m]
  # We need to strip out the "m" otherwise our other arg parsers
  # will choke on the extra parameter
  ARGV.each_with_index do |o, i|
    if o == "-m" || o == "--m"
      ARGV.delete_at(i + 1)
      ARGV.delete_at(i)
      break
    end
  end

  mode_classes[result[:m]].new.cli ARGV
else
  Moshy.top_level_help
end